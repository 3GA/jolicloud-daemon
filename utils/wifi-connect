#!/usr/bin/env python

from twisted.internet import gtk2reactor
gtk2reactor.install()

from twisted.internet import reactor
from twisted.web.client import Agent
from twisted.web.http_headers import Headers

import string
import gtk 
import webkit

def check_connection(quit_on_error=False, recursive=True):
    print 'Checking connection...'
    agent = Agent(reactor)
    d = agent.request(
        'GET',
        'http://ping.jolicloud.com',
        Headers({'User-Agent': ['Jolicloud WiFi connect']}),
        None
    )
    def cbResponse(response):
        content_length = response.headers.getRawHeaders('Joli-Length')
        if content_length and string.atoi(content_length[0]) == response.length:
            print 'working'
            reactor.stop()
        else:
            print 'not working'
            webbrowser.show_all()
            if recursive:
                reactor.callLater(0.0, check_connection)
    def cbError(ignored):
        print 'error, not working', ignored
        if quit_on_error:
            reactor.stop()
        if recursive:
            reactor.callLater(0.0, check_connection)
    d.addCallbacks(cbResponse, cbError)

class BrowserPage(webkit.WebView):

    def __init__(self):
        webkit.WebView.__init__(self)
        settings = self.get_settings()
        settings.set_property('enable-developer-extras', False)

        # scale other content besides from text as well
        self.set_full_content_zoom(True)

class WebBrowser(gtk.Window):
    def __init__(self, url):
        gtk.Window.__init__(self)
        
        self.set_icon(self.render_icon(gtk.STOCK_DIALOG_AUTHENTICATION, gtk.ICON_SIZE_MENU))
        #self.set_icon('internet')
        self.maximize()
        self.connect('map-event', self._on_map_event, url)
        self.connect('destroy', destroy_cb)
        
        self.view = BrowserPage()
        self.view.connect("title-changed", self._title_changed_cb)
        #self.view.connect("load-started", self._view_load_cb)
        self.view.connect("load-finished", self._view_load_cb)
        
        sw = gtk.ScrolledWindow() 
        sw.add(self.view)
        
        self.add(sw)
        #self.show_all()
    
    def _on_map_event(self, event, m, url):
        self.view.open(url)
    
    def _view_load_cb(self, view, frame):
        reactor.callLater(0.0, check_connection)
        #check_connection()
    
    def _title_changed_cb (self, view, frame, title):
        self.set_title(title)

def destroy_cb(window):
    window.destroy()
    reactor.stop()

if __name__ == '__main__':
    webbrowser = WebBrowser('http://ping.jolicloud.com')
    check_connection(quit_on_error=True, recursive=False)
    reactor.run()

